name: Inject and run
on: [workflow_dispatch]

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      API_TOKEN:     ${{ secrets.API_TOKEN }}
      API_ENDPOINT:  ${{ vars.API_ENDPOINT }}   # optional
      PUBLIC_URL:    ${{ vars.PUBLIC_URL }}     # optional, if used in mapping
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      # You use YAML in mapping → install PyYAML
      - name: Install deps for YAML
        run: pip install --disable-pip-version-check --no-cache-dir pyyaml

      - name: Inject values
        run: |
          python scripts/inject_secrets.py \
            --mapping tools/config/mapping.json \
            --require-all

      - name: Verify injected files (masked)
        run: |
          python - <<'PY'
          import json, pathlib, re

          # 1) JSON
          cj = pathlib.Path("config.json")
          assert cj.exists(), "config.json not created"
          data = json.loads(cj.read_text(encoding="utf-8"))
          assert data.get("api", {}).get("key"), "API key missing in config.json!"
          assert data.get("api", {}).get("endpoint"), "API endpoint missing in config.json!"
          masked = {"api": dict(data["api"])}
          masked["api"]["key"] = "***"
          print("config.json (masked):")
          print(json.dumps(masked, indent=2))

          # 2) YAML (presence-only; PyYAML is installed so we can parse if you want)
          try:
              import yaml
              sy = pathlib.Path("settings.yaml")
              if sy.exists():
                  y = yaml.safe_load(sy.read_text(encoding="utf-8")) or {}
                  # adjust these paths to whatever you set in mapping
                  if isinstance(y, dict):
                      api_key = (((y.get("service") or {}).get("api") or {}).get("key"))
                      assert api_key, "API key missing in settings.yaml!"
          except Exception as e:
              print("YAML check skipped:", e)

          # 3) Token replacement in app/app.py (placeholder must be gone)
          ap = pathlib.Path("app/app.py")
          if ap.exists():
              txt = ap.read_text(encoding="utf-8")
              assert "${API_TOKEN}" not in txt, "app/app.py still contains ${API_TOKEN} placeholder"

          print("✅ All required values present.")
          PY

      - name: Run app
        run: python app/app.py
